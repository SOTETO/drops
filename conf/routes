
# Widgets
GET     /widgets/user/:uuid                                 controllers.widgets.Users.getUser(uuid: String)
POST    /widgets/users                                      controllers.widgets.Users.getUsers
POST    /widgets/users/count                                controllers.widgets.Users.getCountUsers

# WebApp endpoints
GET     /webapp/identity                                    controllers.webapp.Auth.identity
POST    /webapp/authenticate                                controllers.webapp.Auth.authenticate
GET     /webapp/out                                         controllers.webapp.Auth.signOut
GET     /webapp/email/reset/:tokenId                        controllers.webapp.Auth.resetEmail(tokenId: String)
POST    /webapp/email/reset/:tokenId                        controllers.webapp.Auth.handleResetEmail(tokenId: String)
POST    /webapp/email/reset                                 controllers.webapp.Auth.handleResetEmailStartData
GET     /webapp/reset/:tokenId                              controllers.webapp.Auth.resetPassword(tokenId: String)
POST    /webapp/reset/:tokenId                              controllers.webapp.Auth.handleResetPassword(tokenId: String)
POST    /webapp/reset                                       controllers.webapp.Auth.handleResetPasswordStartData
POST    /webapp/signup                                      controllers.webapp.Auth.handleStartSignUp
GET     /webapp/signup/:tokenId                             controllers.webapp.Auth.signUp(tokenId)
# WebApp profile
GET     /webapp/user/delete                                 controllers.webapp.Auth.deleteUser
GET     /webapp/user/:uuid                                  controllers.webapp.Profile.getUser(uuid : String)
GET     /webapp/profile/role/:userUUID/:pillar              controllers.webapp.Profile.assignRole(userUUID : String, pillar : String)
GET     /webapp/profile/get                                 controllers.webapp.Profile.get
POST    /webapp/profile/update                              controllers.webapp.Profile.update
GET     /webapp/profile/assign/:crewUUID                    controllers.webapp.Profile.assignCrew(crewUUID: String)
DELETE  /webapp/profile/remove/crew                         controllers.webapp.Profile.removeCrew
GET     /webapp/profile/newsletter                          controllers.webapp.Profile.getNewsletterSettingsPool1
POST    /webapp/profile/newsletter/:setting                 controllers.webapp.Profile.setNewsletterSettingsPool1(setting: String)
#WebApp crew
GET     /webapp/crew/ws                                     controllers.webapp.CrewSocketController.socket
GET     /webapp/crew/get/:id                                controllers.webapp.CrewController.get(id: String)
GET     /webapp/crew/get/:name                              controllers.webapp.CrewController.get(name: String)
POST    /webapp/crew/list                                   controllers.webapp.CrewController.list
POST    /webapp/crew/count                                  controllers.webapp.CrewController.count
GET     /webapp/oauthclient/ws                              controllers.webapp.OauthClientSocketController.socket
GET     /webapp/oauthclient/get/:name                             controllers.webapp.OauthClientController.get(name: String)
GET     /webapp/oauthclient/list                            controllers.webapp.OauthClientController.list
POST    /webapp/oauthclient/create                          controllers.webapp.OauthClientController.add

GET     /webapp/organization/ws                             controllers.webapp.OrganizationSocketController.socket
GET     /webapp/organization/get/:name                      controllers.webapp.OrganizationController.get(name: String)
#GET     /webapp/organization/list                           controllers.webapp.OrganizationController.list

POST    /webapp/avatar/upload                               controllers.webapp.Avatar.upload
GET     /webapp/avatar/get                                  controllers.webapp.Avatar.getAll
GET     /webapp/avatar/has/me/:userUUID/:width/:height      controllers.webapp.Avatar.has(userUUID : String, width: Int, height: Int)
GET     /webapp/avatar/get/me/:userUUID/:width/:height      controllers.webapp.Avatar.getSelected(userUUID : String, width: Int, height: Int)
GET     /webapp/avatar/get/:id                              controllers.webapp.Avatar.get(id: String)
GET     /webapp/avatar/get/:id/:width/:height               controllers.webapp.Avatar.getThumb(id: String, width: Int, height: Int)
GET     /webapp/avatar/csrf                                 controllers.webapp.Avatar.getCSRF
POST    /webapp/avatar/upload/thumbnails/:id                controllers.webapp.Avatar.thumbnails(id: String)
DELETE  /webapp/avatar/delete/:id                           controllers.webapp.Avatar.remove(id: String)
GET     /webapp/avatar/select/:id                           controllers.webapp.Avatar.select(id: String)

# Rest api
GET     /rest/profile                                       controllers.RestApi.profile
POST    /rest/user/create                                  controllers.RestApi.createUser
POST    /rest/user                                         controllers.RestApi.getUsers
POST    /rest/user/:id                                     controllers.RestApi.getUser(id : java.util.UUID)
PUT     /rest/user/:id                                     controllers.RestApi.updateUser(id : java.util.UUID)
DELETE  /rest/user/:id                                     controllers.RestApi.deleteUser(id: java.util.UUID)
POST    /rest/user/crew/:uuidUser/:uuidCrew              controllers.RestApi.assignUserToCrew(uuidUser: java.util.UUID, uuidCrew: java.util.UUID, pillar : Option[String])

POST    /rest/crew/create                                  controllers.RestApi.createCrews
GET     /rest/user/:id/task                                 controllers.RestApi.getTasksForUser(id: java.util.UUID)
GET     /rest/user/:id/access                               controllers.RestApi.getAccessRightsForUser(id: java.util.UUID)
POST    /rest/crew                                          controllers.RestApi.getCrews
GET     /rest/task                                          controllers.RestApi.getTasks
POST    /rest/task                                          controllers.RestApi.createTask
GET     /rest/task/:id                                      controllers.RestApi.getTasksWithAccessRights(id: Long)
DELETE  /rest/task/:id                                      controllers.RestApi.deleteTask(id: Long)
GET     /rest/access                                        controllers.RestApi.getAccessRights
#GET /rest/access controllers.RestApi.getAccessRights(q: String, f: String)
GET     /rest/access/:id                                    controllers.RestApi.findAccessRight(id: Long)
DELETE  /rest/access/:id                                    controllers.RestApi.deleteAccessRight(id: Long)
POST    /rest/access                                        controllers.RestApi.createAccessRight

#Pool1User Rest API
POST 		/rest/pool1user/create							controllers.RestApi.createPool1User

# OAuth2 Rest API
GET     /oauth2/rest/profile                                controllers.Oauth2RestApi.profile
GET     /oauth2/code/get/:clientId                          controllers.OAuth2Controller.getCode(clientId : String, ajax: Option[Boolean])
GET     /oauth2/code/get                                    controllers.OAuth2Controller.getCodeOAuth2Spec(scope: Option[String], client_id : String, response_type : String, state: String, redirect_uri: String, ajax: Option[Boolean])


# OAuth 2 Server
GET     /oauth2/access_token                                controllers.OAuth2Controller.accessToken
POST    /oauth2/access_token                                controllers.OAuth2Controller.accessToken

# Public assets
GET     /assets/*file                                       controllers.Assets.versioned(path="/public", file: Asset)
GET     /webjars/*file                                      controllers.WebJarAssets.at(file)
